from mcstats import mcstats
from aiogram.dispatcher.filters.builtin import Command
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentType
from asyncio import sleep
from datetime import datetime as dt
from random import choice

host = "mint.mcpehost.ru"
port = 19999

bot = Bot(token="5208615210:AAFRLT865o9oMPnkbL0pgou9xPTsjvi1UEs")
dp = Dispatcher(bot)

first_time = dt.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")


def stat():
    try:
        with mcstats(host, port=port, timeout=5) as data:
            num=(data.__dict__['num_players'])
            stat = str(f"*Mark0bka Server\n     Players:* {num}/10")
            return stat
    except:
        stat = "[–ó–º–µ–π](tg://user?id=809901505), [–ê–Ω—Ç–æ–Ω](tg://user?id=1123543137) —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª –∏ –Ω–µ –≤—Å—Ç–∞–µ—Çüåö"
        return stat

def hello():
    
    message = ""
    
    hello_message = [
        "–ü—Ä–∞–≤–∏–ª–∞:\nüëâ –°–ø–∞–≤–Ω –∏ –≤—Å–µ –Ω–∞ –Ω–µ–º –æ–±—â–µ–µ (—Ä–∞–¥–∏—É—Å –æ—Ç —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ -3159 1260 - 50 –∫—É–±–æ–≤)",
        "\n‚õ∫Ô∏è –°—Ç—Ä–æ–∏—à—å –¥–æ–º - –¥–µ–ª–∞–π —Ç–∞–±–ª–∏—á–∫–∏.\nüïã –ü–æ—Å—Ç–∞–≤–∏–ª —Å—É–Ω–¥—É–∫ - –ø–æ—Å—Ç–∞–≤—å –∏ —Ç–∞–±–ª–∏—á–∫—É.\nüìù –í—Å–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—á–∫–∞–º–∏.\nüè° –í—Å–µ —á—Ç–æ –≤ –¥–æ–º–µ –∏–ª–∏ –æ–≥–æ—Ä–æ–∂–µ–Ω–æ –≤–æ–∫—Ä—É–≥ –¥–æ–º–∞ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–æ - –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ.",
        "\nüì¨ –°–¥–µ–ª–∞–π—Ç–µ –ø–æ—á—Ç—É: –±–æ—á–∫—É –∏–ª–∏ —Å—É–Ω–¥—É–∫ —Å —Ç–∞–±–ª–∏—á–∫–æ–π –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—ç–≥–æ–º —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, –ø–æ–º–æ–≥–∞–µ—Ç –≤ –æ–±–º–µ–Ω–µ.\nüåç –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–≤–æ–µ–≥–æ –¥–æ–º–∞ –∏–ª–∏ –∑–µ–º–ª—è–Ω–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ–±—Ä–∞—Ç—å –≤–µ—á–µ—Ä–∏–Ω–∫—É –¥—Ä—É–∑–µ–π –∏–ª–∏ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å.",
        "\nü§≤ –•–æ–¥–∏—Ç—å, —Å–ø–∞—Ç—å –≤ –∫—Ä–æ–≤–∞—Ç—è—Ö –∏ —Ä—ã—Ç—å—Å—è –≤ —Å—É–Ω–¥—É–∫–∞—Ö - –º–æ–∂–Ω–æ. –ë—Ä–∞—Ç—å —á—Ç–æ –ª–∏–±–æ –Ω–µ–ª—å–∑—è.\n‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –≤ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–µ —Å–≤–æ–∏–º –Ω–∏–∫–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –ø–æ—Ç–µ—Ä–∏ –ø–æ–Ω—è—Ç–Ω–æ –±—ã–ª–æ —á–µ–π —à–º–æ—Ç.",
        "\nüóÉ –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ–π—Ñ–∞ –¥–ª—è –æ—Å–æ–±–æ —Ü–µ–Ω–Ω–æ–≥–æ –ª—É—Ç–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –≠–Ω–¥–µ—Ä —Å—É–Ω–¥—É–∫ —Å —à–∞–ª–∫–µ—Ä–∞–º–∏ –≤–Ω—É—Ç—Ä–∏. –ò—Ö –º–Ω–æ–≥–æ —Å—Ç–æ–∏—Ç —É –≤—Å–µ—Ö. –Ø —Å—Ç–∞–≤–ª—é –¥–∞–∂–µ —É –ø–æ—á—Ç—ã —Å—É–Ω–¥—É–∫.\nüê∑üêÆüê∂üê±üêî –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏ –æ–≥–æ—Ä–æ–¥—ã –≤ –∑–∞–≥–æ–Ω–∞—Ö —É –¥–æ–º–∞ - –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ.",
        "\nüå≥üå≤üå¥ –ë–µ—Ä–µ–≥–∏ –ø—Ä–∏—Ä–æ–¥—É ‚Äî –º–∞—Ç—å —Ç–≤–æ—é! –°—Ä—É–±–∏–ª –¥–µ—Ä–µ–≤–æ - –ø–æ—Å–∞–¥–∏ –Ω–æ–≤–æ–µ –∏–∑ —Å–∞–∂–µ–Ω—Ü–∞, –Ω–µ –¥–µ–ª–∞–µ–º –µ–±—É—á–∏—Ö —Å—Ç–æ–ª–±–æ–≤, —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Å–≤–µ—â–∞—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é.\nüåö –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –º—ã –≤—Å–µ —Ç—É—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –¥—Ä—É–∑—å—è.",
        "\nüí• –ü–æ—Å–∫–æ–ª—å–∫—É –∫—Ä–∏–ø–µ—Ä—ã —â–∞ –µ–±–∞—à–∞—Ç —Å–∏–ª—å–Ω–µ–µ, –µ—Å–ª–∏ –≤—ã —Å–ª–æ–º–∞–ª–∏ —á—É–∂—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É –∫—Ä–∏–ø–µ—Ä–æ–º - –≤—ã –¥–æ–ª–∂–Ω—ã –µ–µ –ø–æ—á–∏–Ω–∏—Ç—å.\nü™ìüö´ –ó–∞ —É–≥—Ä–æ–∑—ã –∏ —Å–ª–æ–≤–∞ –≤ –∏–Ω–µ—Ç–µ –∫–∞—Ä–∞—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –†–§, –Ω–æ –∏ –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ. –ù–µ –Ω–∞–¥–æ –æ–±–µ—â–∞—Ç—å —É—Å—Ç—Ä–æ–∏—Ç—å –ª–∞–≥–∏, –¥—é–ø-–º–∞—à–∏–Ω—ã –∏ –ø—Ä–æ—á–∏–µ –≤–µ—â–∏, —Å–ø–æ—Å–æ–±–Ω—ã–µ –ø–æ–ª–æ–º–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.",
        "\nüî• –ß–∏—Ç—ã —Ç–æ–∂–µ –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º. –î–∞–∂–µ —Ç–µ–∫—Å—Ç—É—Ä–ø–∞–∫–∏ –∏ —Ä–µ—Å—É—Ä—Å –ø–∞–∫–∏ —Å –∫–æ–º–ø–∞—Å–æ–º. (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ä—Ç—É, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤—Å–µ–º –≤—ã–¥–∞—Ç—å –∫–∞—Ä—Ç—ã üó∫ )",
        "\nüòàüëπüë∫ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ê–î. –í—ã—Å–æ—Ç–∞ –ø–æ—Å—Ç–æ–π–∫–∏ –≤—Å–µ—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤ –≤ –∞–¥—É –∫ –≤–∞—à–∏–º –¥–æ–º–∞–º - 100 –±–ª–æ–∫–æ–≤. –ù–∞ —ç—Ç–æ–π –≤—ã—Å–æ—Ç–µ –ø—Ä–æ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –¥–æ—Ä–æ–≥–∏ –≤ –∞–¥—É.",
        "\nüö∑ –ï—Å–ª–∏ –ê–Ω—Ç–æ–Ω —É–≤–∏–¥–∏—Ç, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Ä–æ–µ—Ç—Å—è –≤ –µ–≥–æ —Å—É–Ω–¥—É–∫–∞—Ö –±–µ–∑ –µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è, –æ–Ω –∏–º–µ–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ —É–±–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚ôøÔ∏è , –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –µ–º—É –¥–æ—Å—Ç—É–ø –∫ —Å—É–Ω–¥—É–∫–∞–º –∏ —Ä–µ–¥—Å—Ç–æ—É–Ω—É –∏ –∑–∞–±—Ä–∞—Ç—å —Å–µ–±–µ –µ–≥–æ —Ä–µ—Å—É—Ä—Å—ã. –ó–º–µ–π —Å–¥–µ–ª–∞–µ—Ç —Ç–æ–∂–µ —Å–∞–º–æ–µ. –ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –≥—Ä–∏—Ñ–µ—Ä–∞–º–∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–∏."
        "\nüôã‚Äç‚ôÇ –í—Å–µ–º –Ω–æ–≤–∏—á–∫–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª, –∞ –µ—â–µ –ø–æ–æ–±–µ—â–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, —è–≤–ª—è—é—â–∏–µ—Å—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –¥–æ–≥–æ–≤–æ—Ä–æ–º –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ.",
        "\n\n–ï—Å–ª–∏ –Ω–∞–¥–æ —á—Ç–æ - —Å–ø—Ä–æ—Å–∏ –≤ —á–∞—Ç–∏–∫–µ. –í—Å–µ–≥–¥–∞ –ø–æ–¥–µ–ª–∏–º—Å—è —Ä–µ—Å–∞–º–∏ –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∂–µ–º –∫—É–¥–∞ –∏–¥—Ç–∏ –∑–∞ –Ω–∏–º–∏."
    ]
    
    for i in hello_message:
        message += i
    
    return message

@dp.message_handler(content_types = ["new_chat_members"])
async def new_chat_member(message: types.Message):
    
    await message.answer_sticker("CAACAgIAAxkBAAESNJRiPEWNy9Ql-yFsgqeW9lK1wbghaQACdgIAAgk7OxORLH4aUgNjViME")
    sleep(1)
    await message.answer(hello())

@dp.message_handler(commands='status')
async def main(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="UpdateüîÅ", callback_data="update"))
    await message.reply(stat(), parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query_handler(text="update")
async def send_random_value(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="UpdateüîÅ", callback_data="apdate"))
    await call.message.edit_text(stat(), parse_mode="Markdown", reply_markup=keyboard)
    await call.answer("–û–±–Ωo–≤–ª–µ–Ω–æ!")

@dp.callback_query_handler(text="apdate")
async def send_random_value1(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="UpdateüîÅ", callback_data="update"))
    await call.message.edit_text(stat(), parse_mode="Markdown", reply_markup=keyboard)
    await call.answer("–û–±–Ωo–≤–ª–µ–Ω–æ!")

@dp.message_handler(Command(commands=["admins"]))
async def send_welcome(message: types.Message, command: Command.CommandObj):
    args = command.args
    if args == None:
        await message.answer("–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –æ–±—Ä–∞–∑—Ü–µ:\n/admins –≤–∫–ª—é—á–∏—Ç–µ –≤—ã–∂–∏–≤–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ü•∫")
    else:
        await message.answer(f"[–ó–º–µ–π](tg://user?id=809901505), [–ê–Ω—Ç–æ–Ω](tg://user?id=1123543137) *{args}*", parse_mode="Markdown")
    
@dp.callback_query_handler(text="yes")
async def yes(call: types.CallbackQuery):
    global first_time
    result = dt.now() - first_time
    if result.seconds > 180:
        first_time = dt.now()
        await call.message.edit_text('[–ó–º–µ–π](tg://user?id=809901505), [–ê–Ω—Ç–æ–Ω](tg://user?id=1123543137) –≤—ã –Ω–∞–º –Ω—É–∂–Ω—ãüëÄ', parse_mode="Markdown")
    else:
        ostatok = 180 - result.seconds #—è –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–ª, –∫–∞–∫ –±—É–¥–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º "–æ—Å—Ç–∞—Ç–æ–∫")))
        await call.answer(f'–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {ostatok // 60}m {ostatok % 60}s')

@dp.callback_query_handler(text="no")
async def no(call: types.CallbackQuery):
    await call.answer("ok")
    await call.message.delete()

@dp.message_handler(commands="minecraft")
async def minecraft(message: types.Message):
    await bot.copy_message(message.chat.id, -1001528440871, 179)

@dp.message_handler(commands="ores")
async def ores(message: types.Message):
    await bot.copy_message(message.chat.id, -1001528440871, 136)

@dp.message_handler(commands="potions")
async def potions(message: types.Message):
    await bot.copy_message(message.chat.id, -1001528440871, 180)

@dp.message_handler(commands="rules")
async def rules(message: types.Message):
    await message.answer(hello())

@dp.message_handler(content_types = types.ContentTypes.LEFT_CHAT_MEMBER)
async def left_chat_members(message: types.Message):
    await bot.copy_message(message.chat.id, -1001528440871, 343)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)